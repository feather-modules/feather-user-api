import FeatherAPIKit
import FeatherOpenAPIKit

extension User.Oauth {
    
    enum Schemas {
        
        enum ClientId: TextSchema {
            static let description = "The public identifier for the client"
            static let examples = [
                "asddfh"
            ]
        }
        
        enum RedirectUrl: TextSchema {
            static let description = "The url to redirect to after successful request"
            static let examples = [
                "url.com"
            ]
        }
        
        enum Scope: TextSchema {
            static let description = "Scope like: read write"
            static let examples = [
                "read write"
            ]
        }
        
        enum State: TextSchema {
            static let description = "Request-specific data"
            static let examples = [
                "kjsngsfgn"
            ]
        }
        
        enum ResponseType: TextSchema {
            static let description = "Request-specific data"
            static let examples = [
                "code"
            ]
        }
        
        enum CodeChallenge: TextSchema {
            static let description = "the code challenge generated by the client application"
            static let examples = [
                "sddfslkdnflasndf"
            ]
        }
        
        enum CodeChallengeMethod: TextSchema {
            static let description = "S256"
            static let examples = [
                "S256"
            ]
        }
        
        enum GrantType: TextSchema {
            static let description = "authorization_code"
            static let examples = [
                "authorization_code"
            ]
        }
        
        enum Code: TextSchema {
            static let description = "authorization code returned before"
            static let examples = [
                "uiu9879khh"
            ]
        }
        
        enum CodeVerifier: TextSchema {
            static let description = "a plaintext string that was used to calculate the hash that was previously sent in the code_challenge parameter"
            static let examples = [
                "uiu9879khh"
            ]
        }
        
        enum JWT: TextSchema {
            static let description = "JWT"
            static let examples = [
                "uiu9879khh"
            ]
        }
        
        enum LocationHeader: TextSchema {
            static let description = "Location header"
            static let examples: [String] = [
                "http:localhost/redirect?code=asdasfg"
            ]
        }
        
        enum AuthorizePostRequest: ObjectSchema {
            static let description = ""
            static let properties: [ObjectSchemaProperty] = [
                .init("clientId", ClientId.self, required: false),
                .init("redirectUrl", RedirectUrl.self, required: false),
                .init("scope", Scope.self, required: false),
                .init("state", State.self, required: false),
                .init("responseType", ResponseType.self, required: false),
                .init("accountId", User.Account.Schemas.Id.self, required: false),
                .init("codeChallenge", CodeChallenge.self, required: false),
                .init("codeChallengeMethod", CodeChallengeMethod.self, required: false),
            ]
        }
        
        enum ExchangePostRequest: ObjectSchema {
            static let description = ""
            static let properties: [ObjectSchemaProperty] = [
                .init("grantType", GrantType.self, required: false),
                .init("code", Code.self, required: false),
                .init("clientId", ClientId.self, required: false),
                .init("redirectUrl", RedirectUrl.self, required: false),
                .init("codeVerifier", CodeVerifier.self, required: false),
            ]
        }
        
        enum ExchangePostResponse: ObjectSchema {
            static let description = ""
            static let properties: [ObjectSchemaProperty] = [
                .init("jwt", JWT.self),
            ]
        }
                
    }
    
}
